#!/usr/bin/env python3
import sys
import requests
from bs4 import BeautifulSoup
import re
import urllib.parse
import time
import random
import string
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from requests.exceptions import RequestException

def xss_exploiter(target):
    """Test for XSS vulnerabilities in a web application."""
    print(f"[+] XSS Vulnerability Scanner for: {target}")
    print("-" * 60)

    # Clean and validate target URL
    if not target.startswith(('http://', 'https://')):
        target = 'http://' + target

    scan_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))

    test_payloads = [
        f"reflect{scan_id}",
        f"<div id='reflect{scan_id}'>test</div>",
        f"reflect{scan_id}\"'><",
        f"<!--reflect{scan_id}-->",
        f"reflect{scan_id}{{7*7}}"
    ]
    advanced_payloads = [
        f"<reflect{scan_id}>",
        f"'\"><reflect{scan_id}>",
        f"</script><reflect{scan_id}>",
        f"<img src=x onerror=console.log('reflect{scan_id}')>",
        f"<svg><animate onbegin=console.log('reflect{scan_id}') attributeName=x dur=1s>",
        f"<reflect{scan_id} onmouseover=console.log(1)>",
        f"javascript:console.log('reflect{scan_id}')"
    ]

    results = {
        "target": target,
        "injection_points": [],
        "vulnerable_urls": [],
        "vulnerable_forms": [],
        "scan_id": scan_id
    }

    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
    })

    try:
        print("[+] Fetching target page...")
        response = session.get(target, timeout=5, verify=False)  # CHANGE: timeout reduced
        if response.status_code != 200:
            print(f"[-] Failed to access target. Status code: {response.status_code}")
            return

        print(f"[+] Successfully accessed target (Status: {response.status_code}, Length: {len(response.text)})")
        soup = BeautifulSoup(response.text, 'html.parser')

        print("\n[+] Identifying URL parameters...")
        links = soup.find_all('a', href=True)
        urls_to_test = []

        for link in links:
            href = link['href']
            if href.startswith('/'):
                parsed_target = urlparse(target)
                href = f"{parsed_target.scheme}://{parsed_target.netloc}{href}"
            elif not href.startswith(('http://', 'https://')):
                href = urllib.parse.urljoin(target, href)

            parsed_url = urlparse(href)
            if parsed_url.query:
                urls_to_test.append(href)
                print(f"  [*] Found URL with parameters: {href}")

        if urls_to_test:
            print(f"\n[+] Testing {len(urls_to_test)} URLs with parameters for XSS...")
            for url in urls_to_test:
                parsed_url = urlparse(url)
                query_params = parse_qs(parsed_url.query)

                for param in query_params:
                    print(f"  [*] Testing parameter: {param}")

                    for payload in test_payloads:
                        new_params = query_params.copy()
                        new_params[param] = [payload]
                        new_query = urlencode(new_params, doseq=True)
                        new_url = urlunparse((
                            parsed_url.scheme,
                            parsed_url.netloc,
                            parsed_url.path,
                            parsed_url.params,
                            new_query,
                            parsed_url.fragment
                        ))

                        try:
                            test_response = session.get(new_url, timeout=5, verify=False)  # CHANGE
                            if payload in test_response.text:
                                print(f"    [!] Parameter '{param}' reflects input at {new_url}")

                                is_vulnerable = False
                                for adv_payload in advanced_payloads:
                                    new_params[param] = [adv_payload]
                                    adv_query = urlencode(new_params, doseq=True)
                                    adv_url = urlunparse((
                                        parsed_url.scheme,
                                        parsed_url.netloc,
                                        parsed_url.path,
                                        parsed_url.params,
                                        adv_query,
                                        parsed_url.fragment
                                    ))

                                    adv_response = session.get(adv_url, timeout=5, verify=False)  # CHANGE

                                    if f"<reflect{scan_id}>" in adv_response.text:
                                        print(f"    [!!!] VULNERABLE: Parameter '{param}' at {url}")
                                        is_vulnerable = True
                                        results["vulnerable_urls"].append({
                                            "url": url,
                                            "parameter": param,
                                            "payload": adv_payload,
                                            "response_length": len(adv_response.text)
                                        })
                                        break

                                if is_vulnerable:
                                    results["injection_points"].append({
                                        "type": "url_parameter",
                                        "url": url,
                                        "parameter": param
                                    })
                        except RequestException as e:
                            print(f"    [-] Error testing {new_url}: {str(e)}")

        else:
            print("[-] No URLs with parameters found.")

        print("\n[+] Identifying forms...")
        forms = soup.find_all('form')

        if forms:
            print(f"[+] Found {len(forms)} forms to test")

            for i, form in enumerate(forms):
                print(f"\n[+] Testing form #{i+1}")

                action = form.get('action', '')
                method = form.get('method', 'get').lower()

                if action.startswith('/'):
                    parsed_target = urlparse(target)
                    action = f"{parsed_target.scheme}://{parsed_target.netloc}{action}"
                elif not action.startswith(('http://', 'https://')):
                    action = urllib.parse.urljoin(target, action)
                elif not action:
                    action = target

                print(f"  [*] Form action: {action}, method: {method}")

                inputs = []
                for input_tag in form.find_all(['input', 'textarea']):
                    input_name = input_tag.get('name')
                    if input_name:
                        inputs.append({'name': input_name, 'value': input_tag.get('value', '')})
                        print(f"  [*] Found input: {input_name}")

                for input_field in inputs:
                    field_name = input_field['name']
                    print(f"  [*] Testing form field: {field_name}")

                    for payload in test_payloads:
                        form_data = {}
                        for inp in inputs:
                            form_data[inp['name']] = payload if inp['name'] == field_name else inp['value']

                        try:
                            if method == 'post':
                                response = session.post(action, data=form_data, timeout=5, verify=False)  # CHANGE
                            else:
                                response = session.get(action, params=form_data, timeout=5, verify=False)  # CHANGE

                            if payload in response.text:
                                print(f"    [!] Form field '{field_name}' reflects input")

                                is_vulnerable = False
                                for adv_payload in advanced_payloads:
                                    form_data[field_name] = adv_payload

                                    if method == 'post':
                                        adv_response = session.post(action, data=form_data, timeout=5, verify=False)
                                    else:
                                        adv_response = session.get(action, params=form_data, timeout=5, verify=False)

                                    if f"<reflect{scan_id}>" in adv_response.text:
                                        print(f"    [!!!] VULNERABLE: Form field '{field_name}' in form {action}")
                                        is_vulnerable = True
                                        results["vulnerable_forms"].append({
                                            "action": action,
                                            "method": method,
                                            "field": field_name,
                                            "payload": adv_payload,
                                            "response_length": len(adv_response.text)
                                        })
                                        break

                                if is_vulnerable:
                                    results["injection_points"].append({
                                        "type": "form_field",
                                        "action": action,
                                        "method": method,
                                        "field": field_name
                                    })
                        except RequestException as e:
                            print(f"    [-] Error testing form field {field_name}: {str(e)}")
        else:
            print("[-] No forms found.")

        print("\n[+] Testing HTTP headers for potential XSS...")
        headers_to_test = ['User-Agent', 'Referer', 'X-Forwarded-For']

        for header in headers_to_test:
            print(f"  [*] Testing header: {header}")

            for payload in test_payloads:
                custom_headers = session.headers.copy()
                custom_headers[header] = payload

                try:
                    response = requests.get(target, headers=custom_headers, timeout=5, verify=False)

                    if payload in response.text:
                        print(f"    [!] Header '{header}' reflects input")

                        is_vulnerable = False
                        for adv_payload in advanced_payloads:
                            custom_headers[header] = adv_payload
                            adv_response = requests.get(target, headers=custom_headers, timeout=5, verify=False)

                            if f"<reflect{scan_id}>" in adv_response.text:
                                print(f"    [!!!] VULNERABLE: Header '{header}'")
                                is_vulnerable = True
                                results["injection_points"].append({
                                    "type": "http_header",
                                    "header": header
                                })
                                break
                except RequestException as e:
                    print(f"    [-] Error testing header {header}: {str(e)}")

        print("\n" + "=" * 60)
        print("XSS VULNERABILITY SCAN SUMMARY")
        print("=" * 60)
        print(f"Target: {target}")
        print(f"Scan ID: {scan_id}")

        if results["injection_points"]:
            print(f"\nFound {len(results['injection_points'])} potential injection points:")
            for point in results["injection_points"]:
                if point["type"] == "url_parameter":
                    print(f"  - URL Parameter: {point['parameter']} in {point['url']}")
                elif point["type"] == "form_field":
                    print(f"  - Form Field: {point['field']} in form at {point['action']} (method: {point['method']})")
                elif point["type"] == "http_header":
                    print(f"  - HTTP Header: {point['header']}")
        else:
            print("\nNo injection points found.")

        if results["vulnerable_urls"] or results["vulnerable_forms"]:
            print("\nVULNERABLE ENDPOINTS:")

            if results["vulnerable_urls"]:
                print(f"\nVulnerable URL Parameters ({len(results['vulnerable_urls'])}):")
                for vuln in results["vulnerable_urls"]:
                    print(f"  - {vuln['parameter']} in {vuln['url']}")
                    print(f"    Payload: {vuln['payload']}")

            if results["vulnerable_forms"]:
                print(f"\nVulnerable Form Fields ({len(results['vulnerable_forms'])}):")
                for vuln in results["vulnerable_forms"]:
                    print(f"  - {vuln['field']} in form at {vuln['action']} (method: {vuln['method']})")
                    print(f"    Payload: {vuln['payload']}")
        else:
            print("\nNo confirmed XSS vulnerabilities found.")

        print("\nPOTENTIAL REMEDIATION:")
        print("  - Implement proper input validation")
        print("  - Use context-sensitive output encoding")
        print("  - Implement Content Security Policy (CSP)")
        print("  - Consider using frameworks with automatic XSS protection")
        print("  - Apply the principle of least privilege")

        return results

    except Exception as e:
        print(f"[-] An error occurred during the scan: {str(e)}")
        return None

def main():
    """Main function to run the XSS tester."""
    if len(sys.argv) < 2:
        print("Usage: python xss_exploiter.py <target_url>")
        sys.exit(1)

    target = sys.argv[1]
    requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
    xss_exploiter(target)

if __name__ == "__main__":
    main()
